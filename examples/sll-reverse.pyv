sort node


mutable relation nrtc(node, node)
mutable constant h: node
mutable constant i: node
mutable constant j: node
mutable constant null: node

immutable constant u: node
immutable constant v: node

# instantiate dtca(node, nrtc) for init
init nrtc(X,X)
init nrtc(X, Y) & nrtc(Y, Z) -> nrtc(X, Z)
init nrtc(X, Y) & nrtc(Y, X) -> X = Y
init nrtc(X, Y) & nrtc(X, Z) -> nrtc(Y, Z) | nrtc(Z, Y)
init X != null -> !nrtc(X, null) & !nrtc(null, X)

init u != null
init v != null
init nrtc(h, u)
init h != u
init nrtc(u, v)
axiom u != v
init nrtc(u, Z) & u != Z -> nrtc(v, Z)

# instantiate dtca(node, nrtc) for invariant
safety nrtc(X,X)
safety nrtc(X, Y) & nrtc(Y, Z) -> nrtc(X, Z)
safety nrtc(X, Y) & nrtc(Y, X) -> X = Y
safety nrtc(X, Y) & nrtc(X, Z) -> nrtc(Y, Z) | nrtc(Z, Y)
safety (nrtc(v, i) & v != i -> nrtc(v, u))


init i = h
init j = null

transition step()
  modifies nrtc, i, j
  i != null &
  (new(nrtc(U,V)) <-> (nrtc(U,V) & !(nrtc(U,i) & nrtc(i,V) & i != V) | (nrtc(U,i) & nrtc(j,V)))) &
  (exists K. K = new(i) & (nrtc(i, K) & i != K & forall Z. nrtc(i, Z) & i != Z -> nrtc(K, Z))) &
  new(j) = i

