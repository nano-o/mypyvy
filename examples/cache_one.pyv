sort value
sort core

mutable constant memory : value

mutable function cache(core) : value

mutable relation modified(core)
mutable relation exclusive(core)
mutable relation shared(core)
mutable relation invalid(core)

mutable relation proc_read(core)
mutable relation proc_write(core, value)

mutable relation bus_in_use()

mutable relation bus_read(core)
mutable relation bus_read_for_ownership(core)
mutable relation bus_upgrade(core)

mutable relation bus_transfer(value)

init !modified(C)
init !exclusive(C)
init !shared(C)
init invalid(C)
init !proc_read(C)
init !proc_write(C, V)
init !bus_in_use
init !bus_read(C)
init !bus_read_for_ownership(C)
init !bus_upgrade(C)
init !bus_transfer(V)

transition issue_proc_read_invalid(c: core)
  modifies bus_in_use, proc_read, bus_read
  invalid(c) &
  !bus_in_use &
  new(bus_in_use) &
  (forall C. new(proc_read(C)) <-> proc_read(C) | C = c) &
  (forall C. new(bus_read(C)) <-> bus_read(C) | C != c )

transition do_bus_read_invalid(c: core)
  modifies bus_read
  bus_read(c) &
  invalid(c) &
  (forall C. new(bus_read(C)) <-> bus_read(C) & !(C = c))

transition do_bus_read_valid(c: core, v: value)
  modifies bus_read, modified, exclusive, shared, bus_transfer, memory
  bus_read(c) &
  !invalid(c) &
  cache(c) = v &
  (forall C. new(bus_read(C)) <-> bus_read(C) & !(C = c)) &
  (forall C. new(shared(C)) <-> shared(C) | C = c) &
  (forall C. new(modified(C)) <-> modified(C) & !(C = c)) &
  (forall C. new(exclusive(C)) <-> exclusive(C) & !(C = c)) &
  (modified(c) ->  # write back
     new(memory) = v) &
  (!modified(c) ->
    new(memory) = memory) &
  (forall V. new(bus_transfer(V)) <-> bus_transfer(V) | V = v)

transition complete_proc_read_invalid_shared(c: core, v: value)
  modifies invalid, shared, bus_transfer, cache, bus_in_use, proc_read
  invalid(c) &
  proc_read(c) &
  bus_transfer(v) &
  (forall C. !bus_read(C)) &
  (forall V. !new(bus_transfer(V))) &
  (forall C. new(invalid(C)) <-> invalid(C) & !(C = c)) &
  (forall C. new(shared(C)) <-> shared(C) | C = c) &
  (forall C.
     !(C = c) ->
     (new(cache(C)) = cache(C))) &
  new(cache(c)) = v &
  !new(bus_in_use) &
  (forall C. new(proc_read(C)) <-> proc_read(C) & !(C = c))

transition complete_proc_read_invalid_exclusive(c: core, v: value)
  modifies invalid, exclusive, cache, bus_in_use, proc_read
  invalid(c) &
  proc_read(c) &
  (forall V. !bus_transfer(V)) &
  (forall C. !bus_read(C)) &
  memory = v &

  (forall C. new(invalid(C)) <-> invalid(C) & !(C = c)) &
  (forall C. new(exclusive(C)) <-> exclusive(C) | C = c) &
  (forall C.
     !(C = c) ->
     (new(cache(C)) = cache(C))) &
  new(cache(c)) = v &
  !new(bus_in_use) &
  (forall C. new(proc_read(C)) <-> proc_read(C) & !(C = c))

transition issue_proc_write_invalid(c: core, v: value)
  modifies bus_in_use, proc_write, bus_read_for_ownership
  invalid(c) &
  !bus_in_use &
  new(bus_in_use) &
  (forall C, V. new(proc_write(C, V)) <-> proc_write(C, V) | C = c  & V = v) &
  (forall C. new(bus_read_for_ownership(C)) <-> bus_read_for_ownership(C) | C != c )

transition do_bus_read_for_ownership_invalid(c: core)
  modifies bus_read_for_ownership
  bus_read_for_ownership(c) &
  invalid(c) &
  (forall C. new(bus_read_for_ownership(C)) <-> bus_read_for_ownership(C) & !(C = c))

transition do_bus_read_for_ownership_valid(c: core, v: value)
  modifies bus_read_for_ownership, modified, exclusive, shared, invalid, bus_transfer, memory
  bus_read_for_ownership(c) &
  !invalid(c) &
  cache(c) = v &
  (forall C. new(bus_read_for_ownership(C)) <-> bus_read_for_ownership(C) & !(C = c)) &
  (forall C. new(invalid(C)) <-> invalid(C) | C = c) &
  (forall C. new(shared(C)) <-> shared(C) & !(C = c)) &
  (forall C. new(modified(C)) <-> modified(C) & !(C = c)) &
  (forall C. new(exclusive(C)) <-> exclusive(C) & !(C = c)) &
  (modified(c) ->  # write back
     new(memory) = v) &
  (!modified(c) ->
    new(memory) = memory) &
  (forall V. new(bus_transfer(V)) <-> bus_transfer(V) | V = v)

transition complete_proc_write_invalid(c: core, v: value)
  modifies invalid, modified, bus_transfer, cache, bus_in_use, proc_write
  invalid(c) &
  proc_write(c, v) &
  (forall C. !bus_read_for_ownership(C)) &
  (forall V. !new(bus_transfer(V))) &
  (forall C. new(invalid(C)) <-> invalid(C) & !(C = c)) &
  (forall C. new(modified(C)) <-> modified(C) | C = c) &
  (forall C.
     !(C = c) ->
     (new(cache(C)) = cache(C))) &
  new(cache(c)) = v &
  !new(bus_in_use) &
  (forall C, V. new(proc_write(C, V)) <-> proc_write(C, V) & !(C = c  & V = v))

transition proc_write_exclusive(c: core, v: value)
  modifies exclusive, modified, cache
  exclusive(c) &
  !bus_in_use &
  (forall C. new(exclusive(C)) <-> exclusive(C) & !(C = c)) &
  (forall C. new(modified(C)) <-> modified(C) | C = c) &
  (forall C.
     !(C = c) ->
     (new(cache(C)) = cache(C))) &
  new(cache(c)) = v

transition issue_proc_write_shared(c: core, v: value)
  modifies bus_in_use, proc_write, bus_upgrade
  shared(c) &
  !bus_in_use &
  new(bus_in_use) &
  (forall C, V. new(proc_write(C, V)) <-> proc_write(C, V) | C = c  & V = v) &
  (forall C. new(bus_upgrade(C)) <-> bus_upgrade(C) | C != c )

transition do_bus_upgrade(c: core)
  modifies bus_upgrade, shared, invalid
  bus_upgrade(c) &
  (forall C. new(bus_upgrade(C)) <-> bus_upgrade(C) & !(C = c)) &
  (forall C. new(invalid(C)) <-> invalid(C) | C = c) &
  (forall C. new(shared(C)) <-> shared(C) & !(C = c))

transition complete_proc_write_shared(c: core, v: value)
  modifies bus_in_use, proc_write, cache, shared, modified
  shared(c) &
  proc_write(c, v) &
  (forall C. !bus_upgrade(C)) &
  (forall C. new(shared(C)) <-> shared(C) & !(C = c)) &
  (forall C. new(modified(C)) <-> modified(C) | C = c) &
  (forall C.
     !(C = c) ->
     (new(cache(C)) = cache(C))) &
  new(cache(c)) = v &
  (forall C, V. new(proc_write(C, V)) <-> proc_write(C, V) & !(C = c  & V = v)) &
  !new(bus_in_use)

transition evict_modified(c: core)
  modifies memory, modified, invalid
  !bus_in_use &
  modified(c) &
  new(memory) = cache(c) &  # write back
  (forall C. new(modified(C)) <-> modified(C) & !(C = c)) &
  (forall C. new(invalid(C)) <-> invalid(C) | C = c)

transition evict_exclusive_or_shared(c: core)
  modifies exclusive, shared, invalid
  !bus_in_use &
  (exclusive(c) | shared(c)) &
  (forall C. new(exclusive(C)) <-> exclusive(C) & !(C = c)) &
  (forall C. new(shared(C)) <-> shared(C) & !(C = c)) &
  (forall C. new(invalid(C)) <-> invalid(C) | C = c)

safety !invalid(C) & !modified(C) -> cache(C) = memory

# each cache line is in at most one state
invariant !(invalid(C) & modified(C))
invariant !(invalid(C) & exclusive(C))
invariant !(invalid(C) & shared(C))
invariant !(modified(C) & exclusive(C))
invariant !(modified(C) & shared(C))
invariant !(exclusive(C) & shared(C))

invariant exclusive(C1) & C1 != C2 -> invalid(C2)
invariant modified(C1) & C1 != C2 -> invalid(C2)

invariant bus_read(C) -> bus_in_use
invariant bus_read_for_ownership(C) -> bus_in_use
invariant bus_upgrade(C) -> bus_in_use
invariant bus_transfer(V) -> bus_in_use

invariant proc_read(C) -> bus_in_use
invariant proc_write(C, V) -> bus_in_use

invariant proc_write(C1, V) & bus_read_for_ownership(C2) -> invalid(C1)
invariant proc_write(C1, V) & bus_upgrade(C2) -> shared(C1)

invariant !(proc_write(C, V) & bus_upgrade(C))

invariant proc_write(C, V1) & shared(C) -> !bus_transfer(V2)

invariant proc_read(C1) & proc_read(C2) -> C1 = C2
invariant proc_write(C1, V1) & proc_write(C2, V2) -> C1 = C2 & V1 = V2
invariant !(proc_read(C1) & proc_write(C2, V))

invariant !(proc_read(C11) & bus_read_for_ownership(C22))
invariant !(proc_read(C11) & bus_upgrade(C22))
invariant !(proc_write(C11, V) & bus_read(C22))

invariant proc_read(C1) & !bus_read(C2) & C1 != C2 -> shared(C2) | invalid(C2)
invariant proc_read(C1) & !bus_read(C2) & C1 != C2 & shared(C2) -> bus_transfer(cache(C2))

invariant proc_read(C) & bus_transfer(V) -> memory = V
invariant proc_read(C1) & bus_transfer(V) & !invalid(C2) -> cache(C2) = V

invariant proc_write(C1, V) & invalid(C1) & !bus_read_for_ownership(C2) & C1 != C2 -> invalid(C2)

invariant proc_write(C1, V) & shared(C1) & !bus_upgrade(C2) & C1 != C2 -> invalid(C2)

invariant !(bus_transfer(V) & modified(C1) & (proc_read(C2) | proc_write(C2, V2)))

invariant !(bus_upgrade(C1) & exclusive(C2))
invariant !(bus_upgrade(C1) & modified(C2))

# invariant [bmc] !(exists C. modified(C))
