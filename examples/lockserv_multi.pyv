sort node
sort lock

mutable relation lock_msg(node, lock)
mutable relation grant_msg(node, lock)
mutable relation unlock_msg(node, lock)
mutable relation holds_lock(node, lock)
mutable relation server_holds_lock(lock)

init !lock_msg(N, L)
init !grant_msg(N, L)
init !unlock_msg(N, L)
init !holds_lock(N, L)
init server_holds_lock(L)

transition send_lock(n: node, l: lock)
  modifies lock_msg
  new(lock_msg(N, L)) <-> lock_msg(N, L) | N = n & L = l

transition recv_lock(n: node, l: lock)
  modifies lock_msg, server_holds_lock, grant_msg
  lock_msg(n, l) &
  server_holds_lock(l) &
  (new(server_holds_lock(L)) <-> server_holds_lock(L) & L != l) &
  (new(lock_msg(N, L)) <-> lock_msg(N, L) & !(N = n & L = l)) &
  (new(grant_msg(N, L)) <-> grant_msg(N, L) | N = n & L = l)

transition recv_grant(n: node, l: lock)
  modifies grant_msg, holds_lock
  grant_msg(n, l) &
  (new(grant_msg(N, L)) <-> grant_msg(N, L) & !(N = n & L = l)) &
  (new(holds_lock(N, L)) <-> holds_lock(N, L) | N = n & L = l)

transition unlock(n: node, l: lock)
  modifies holds_lock, unlock_msg
  holds_lock(n, l) &
  (new(holds_lock(N, L)) <-> holds_lock(N, L) & !(N = n & L = l)) &
  (new(unlock_msg(N, L)) <-> unlock_msg(N, L) | N = n & L = l)

transition recv_unlock(n: node, l: lock)
  modifies unlock_msg, server_holds_lock
  unlock_msg(n, l) &
  (new(unlock_msg(N, L)) <-> unlock_msg(N, L) & !(N = n & L = l)) &
  (new(server_holds_lock(L)) <-> server_holds_lock(L) | L = l)

safety [mutex] holds_lock(N1, L) & holds_lock(N2, L) -> N1 = N2

invariant grant_msg(N1, L) & grant_msg(N2, L) -> N1 = N2
invariant unlock_msg(N1, L) & unlock_msg(N2, L) -> N1 = N2

invariant !(holds_lock(N1, L) & grant_msg(N2, L))
invariant !(holds_lock(N1, L) & unlock_msg(N2, L))
invariant !(grant_msg(N1, L) & unlock_msg(N2, L))

invariant !(grant_msg(N, L) & server_holds_lock(L))
invariant !(holds_lock(N, L) & server_holds_lock(L))
invariant !(unlock_msg(N, L) & server_holds_lock(L))
